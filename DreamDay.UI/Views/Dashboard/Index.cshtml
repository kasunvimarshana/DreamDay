@using DreamDay.Models.ViewModels
@using System.Globalization
@model DashboardViewModel

@{
    // var title = ViewContext.RouteData.Values["action"].ToString();
    ViewData["Title"] = "Dashboard";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2">Dashboard</h1>
        <div class="btn-toolbar mb-2 mb-md-0">
            <div class="btn-group me-2">
                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="refreshDashboard()">
                    <i class="fas fa-refresh"></i> Refresh
                </button>
            </div>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="row mb-4">
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Total Weddings</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.TotalWeddings</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-heart fa-2x text-gray-300"></i>
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col">
                            <small class="text-success">@Model.UpcomingWeddings upcoming</small>
                            <small class="text-muted">• @Model.PastWeddings completed</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Tasks Progress</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">
                                @(Model.TotalChecklistItems > 0 ? Math.Round((decimal)Model.CompletedChecklistItems / Model.TotalChecklistItems * 100, 1) : 0)%
                            </div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-clipboard-list fa-2x text-gray-300"></i>
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col">
                            <small class="text-success">@Model.CompletedChecklistItems completed</small>
                            <small class="text-warning">• @Model.PendingChecklistItems pending</small>
                            @if (Model.OverdueChecklistItems > 0)
                            {
                                <small class="text-danger">• @Model.OverdueChecklistItems overdue</small>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">Budget Overview</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.TotalBudgetEstimated.ToString("C", CultureInfo.CreateSpecificCulture("en-LK"))</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col">
                            <small class="text-info">@Model.TotalBudgetActual.ToString("C", CultureInfo.CreateSpecificCulture("en-LK")) actual</small>
                            <small class="text-success">• @Model.TotalBudgetPaid.ToString("C", CultureInfo.CreateSpecificCulture("en-LK")) paid</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">Budget Variance</div>
                            <div class="h5 mb-0 font-weight-bold @(Model.BudgetVariance >= 0 ? "text-success" : "text-danger")">
                                @Model.BudgetVariance.ToString("C", CultureInfo.CreateSpecificCulture("en-LK"))
                            </div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-chart-line fa-2x text-gray-300"></i>
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col">
                            <small class="@(Model.BudgetVariance >= 0 ? "text-success" : "text-danger")">
                                @(Model.BudgetVariance >= 0 ? "Under budget" : "Over budget")
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Row -->
    <div class="row mb-4">
        <div class="col-xl-8 col-lg-7">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Budget by Category</h6>
                </div>
                <div class="card-body">
                    <div class="chart-area">
                        <canvas id="budgetChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-4 col-lg-5">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Wedding Progress</h6>
                </div>
                <div class="card-body">
                    @foreach (var wedding in Model.WeddingProgress.Take(5))
                    {
                        <h4 class="small font-weight-bold">
                            @wedding.CoupleName
                            <span class="float-right">@wedding.ProgressPercentage.ToString("F0")%</span>
                        </h4>
                        <div class="progress mb-3">
                            <div class="progress-bar @(wedding.ProgressPercentage < 30 ? "bg-danger" : wedding.ProgressPercentage < 70 ? "bg-warning" : "bg-success")"
                                 role="progressbar" style="width: @wedding.ProgressPercentage%"></div>
                        </div>
                        <small class="text-muted">@wedding.DaysRemaining days remaining • @wedding.CompletedTasks/@wedding.TotalTasks tasks</small>
                        <hr />
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Content Row -->
    <div class="row">
        <!-- Recent Weddings -->
        <div class="col-lg-6 mb-4">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Recent Weddings</h6>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered" width="100%" cellspacing="0">
                            <thead>
                                <tr>
                                    <th>Couple</th>
                                    <th>Date</th>
                                    <th>Days</th>
                                    <th>Progress</th>
                                    <th>Budget</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var wedding in Model.RecentWeddings)
                                {
                                    <tr>
                                        <td>
                                            <a asp-controller="Wedding"
                                               asp-action="Details"
                                               asp-route-id="@wedding.Id"
                                               class="">
                                                @wedding.BrideName & @wedding.GroomName
                                            </a>
                                        </td>
                                        <td>@wedding.WeddingDate.ToString("MMM dd, yyyy")</td>
                                        <td>
                                            <span class="badge @(wedding.IsUpcoming ? (wedding.DaysUntilWedding <= 30 ? "bg-warning" : "bg-info") : "bg-secondary")">
                                                @(wedding.IsUpcoming ? $"{wedding.DaysUntilWedding} days" : "Past")
                                            </span>
                                        </td>
                                        <td>
                                            @if (wedding.TotalTasks > 0)
                                            {
                                                var progressPercent = (decimal)wedding.CompletedTasks / wedding.TotalTasks * 100;
                                                <div class="progress" style="height: 15px;">
                                                    <div class="progress-bar @(progressPercent < 30 ? "bg-danger" : progressPercent < 70 ? "bg-warning" : "bg-success")"
                                                         style="width: @progressPercent%">
                                                        @progressPercent.ToString("F0")%
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                <small class="text-muted">No tasks</small>
                                            }
                                        </td>
                                        <td>
                                            <div>@wedding.EstimatedBudget.ToString("C")</div>
                                            @if (wedding.ActualBudget > 0)
                                            {
                                                <small class="text-muted">@wedding.ActualBudget.ToString("C", CultureInfo.CreateSpecificCulture("en-LK")) actual</small>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Upcoming Tasks -->
        <div class="col-lg-6 mb-4">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Upcoming Tasks</h6>
                </div>
                <div class="card-body">
                    @if (Model.UpcomingTasks.Any())
                    {
                        @foreach (var task in Model.UpcomingTasks)
                        {
                            <div class="d-flex align-items-center justify-content-between border-bottom py-2">
                                <div>
                                    <div class="font-weight-bold">@task.Task</div>
                                    <small class="text-muted">@task.WeddingCouple</small>
                                </div>
                                <div class="text-right">
                                    <div class="@(task.DaysUntilDue <= 3 ? "text-danger" : task.DaysUntilDue <= 7 ? "text-warning" : "text-info")">
                                        @task.DueDate?.ToString("MMM dd")
                                    </div>
                                    <small class="@(task.DaysUntilDue <= 3 ? "text-danger" : task.DaysUntilDue <= 7 ? "text-warning" : "text-muted")">
                                        @task.DaysUntilDue days
                                    </small>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center text-muted py-4">
                            <i class="fas fa-check-circle fa-3x mb-3"></i>
                            <p>No upcoming tasks!</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @* <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script> *@
    <script src="~/lib/chart.js-3.9.1/dist/chart.min.js"></script>
    <script>
        // Currency formatter
        const lkrFormatter = new Intl.NumberFormat('en-LK', {
            style: 'currency',
            currency: 'LKR',
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        });

        // Budget Chart
        const budgetData = @Html.Raw(Json.Serialize(Model.BudgetByCategory));

        const ctx = document.getElementById('budgetChart').getContext('2d');
        const budgetChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: budgetData.map(item => item.category),
                datasets: [{
                    data: budgetData.map(item => item.estimatedCost),
                    backgroundColor: [
                        '#4e73df', '#1cc88a', '#36b9cc', '#f6c23e', '#e74a3b',
                        '#858796', '#5a5c69', '#6f42c1', '#e83e8c', '#fd7e14'
                    ],
                    hoverBackgroundColor: [
                        '#2e59d9', '#17a673', '#2c9faf', '#dda20a', '#c9302c',
                        '#5a5c69', '#484848', '#5a2d91', '#c7296b', '#e35d0a'
                    ],
                    hoverBorderColor: "rgba(234, 236, 244, 1)",
                }],
            },
            options: {
                maintainAspectRatio: false,
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const label = context.label || '';
                                const value = context.parsed;
                                // const formattedValue = new Intl.NumberFormat('en-LK', {
                                //     style: 'currency',
                                //     currency: 'LKR'
                                // }).format(value);
                                const formattedValue = lkrFormatter.format(value);

                                return `${label}: ${formattedValue}`;
                            }
                        }
                    },
                    legend: {
                        display: true,
                        position: 'bottom',
                        labels: {
                            generateLabels: function(chart) {
                                const data = chart.data;
                                return data.labels.map((label, i) => {
                                    const value = data.datasets[0].data[i];
                                    return {
                                        text: `${label}: ${lkrFormatter.format(value)}`,
                                        fillStyle: data.datasets[0].backgroundColor[i],
                                        hidden: false,
                                        index: i
                                    };
                                });
                            }
                        }
                    }
                }
            }
        });

        function refreshDashboard() {
            location.reload();
        }
    </script>
}

@section Styles {
    <style>
        .border-left-primary {
            border-left: 0.25rem solid #4e73df !important;
        }

        .border-left-success {
            border-left: 0.25rem solid #1cc88a !important;
        }

        .border-left-info {
            border-left: 0.25rem solid #36b9cc !important;
        }

        .border-left-warning {
            border-left: 0.25rem solid #f6c23e !important;
        }

        .card {
            border-radius: 0.35rem;
        }

        .progress {
            height: 0.5rem;
        }

        .chart-area {
            position: relative;
            height: 300px;
        }
    </style>
}

